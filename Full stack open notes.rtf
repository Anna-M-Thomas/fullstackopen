{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fmodern\fcharset0 Courier;\f2\fswiss\fcharset0 Helvetica;
\f3\fnil\fcharset0 Menlo-Regular;\f4\froman\fcharset0 Times-Roman;\f5\fmodern\fcharset0 Courier-Bold;
\f6\fnil\fcharset0 LucidaGrande;\f7\froman\fcharset0 Times-Italic;\f8\fnil\fcharset0 LucidaGrande-Bold;
\f9\fmodern\fcharset0 Courier-Oblique;\f10\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red167\green255\blue205;\red127\green0\blue128;\red0\green0\blue109;
\red255\green255\blue255;\red0\green0\blue0;\red144\green1\blue18;\red19\green118\blue70;\red0\green0\blue255;
\red11\green90\blue180;\red101\green76\blue29;\red224\green116\blue59;\red157\green0\blue210;\red229\green158\blue61;
\red52\green0\blue71;\red77\green0\blue105;\red15\green112\blue1;\red32\green108\blue135;\red245\green245\blue91;
\red218\green123\blue196;\red0\green0\blue233;\red107\green0\blue1;\red251\green0\blue7;\red165\green122\blue248;
\red119\green198\blue250;}
{\*\expandedcolortbl;;\cssrgb\c70256\c100000\c84085;\cssrgb\c57919\c12801\c57269;\cssrgb\c0\c6275\c50196;
\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;\cssrgb\c63922\c8235\c8235;\cssrgb\c3529\c52549\c34510;\cssrgb\c0\c0\c100000;
\cssrgb\c0\c43922\c75686;\cssrgb\c47451\c36863\c14902;\cssrgb\c90778\c53523\c29203;\cssrgb\c68627\c0\c85882;\cssrgb\c92341\c67997\c30073;
\cssrgb\c26879\c5470\c34975;\cssrgb\c37964\c9215\c48780;\cssrgb\c0\c50196\c0;\cssrgb\c14902\c49804\c60000;\cssrgb\c96870\c95813\c42728;
\cssrgb\c88928\c57466\c81178;\cssrgb\c0\c0\c93333;\cssrgb\c50196\c0\c0;\cssrgb\c100000\c0\c0;\cssrgb\c71074\c57669\c98056;
\cssrgb\c52963\c81959\c98386;}
\paperw11900\paperh16840\margl1440\margr1440\vieww18060\viewh10140\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 \cb2 Part 1\

\fs24 \cb1 \
Make a React app with create-react-app\
\pard\pardeftab720\sl280\partightenfactor0

\f1\b0 \cf3 \expnd0\expndtw0\kerning0
npx create-react-app foldername\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f2 \cf0 \kerning1\expnd0\expndtw0 \
You can run with \
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3 \expnd0\expndtw0\kerning0
npm start\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f2 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b \cf0 Node\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f2\b0 \cf0 Node.js is a Javascript runtime environment. You can run it with \
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3 \expnd0\expndtw0\kerning0
node name_of_file.js
\f2 \cf0 \kerning1\expnd0\expndtw0 \
Or type node into the command line, or a browser developer tool console.\
\
\pard\pardeftab720\sl280\partightenfactor0

\f0\b \cf0 Destructuring props
\f2\b0 \
\pard\pardeftab720\sl360\partightenfactor0

\f3 \cf4 \cb5 \expnd0\expndtw0\kerning0
props\cf6  = \{\cb1 \
\cb5   \cf4 name:\cf6  \cf7 'Arto Hellas'\cf6 ,\cb1 \
\cb5   \cf4 age:\cf6  \cf8 35\cf6 ,\cb1 \
\cb5 \}\cb1 \
\
\cf9 \cb5 const\cf6  \{ \cf10 name\cf6 , \cf10 age\cf6  \} = \cf4 props\cf6 \cb1 \
\
\cf9 \cb5 const\cf6  \cf11 Hello\cf6  = (\{ \cf4 name\cf6 , \cf4 age\cf6  \}) \cf9 =>\cf6  \{\cb1 \
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf6 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f2 \cf0 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\sl280\partightenfactor0

\f0\b \cf0 Object spread syntax 
\f2\b0 for copying an object and changing part of it\
\pard\pardeftab720\sl360\partightenfactor0

\f3 \cf9 \cb5 \expnd0\expndtw0\kerning0
const\cf6  \cf10 clicks\cf6  = \{\cb1 \
\cb5   \cf4 left:\cf6  \cf8 0\cf6 , \cf4 right:\cf6  \cf8 0\cf6 \cb1 \
\cb5 \}\cb1 \
\pard\pardeftab720\sl280\partightenfactor0

\f2 \cf0 \kerning1\expnd0\expndtw0 \
Copies clicks, and adds 1 to left\
\pard\pardeftab720\sl360\partightenfactor0

\f3 \cf9 \cb5 \expnd0\expndtw0\kerning0
const\cf6  \cf10 newClicks\cf6  = \{ \cb1 \
\cb5   ...\cf4 clicks\cf6 , \cb1 \
\cb5   \cf4 left:\cf6  \cf4 clicks\cf6 .\cf4 left\cf6  + \cf8 1\cf6  \cb1 \
\cb5 \}
\f1 \cf3 \cb1 \
\pard\pardeftab720\sl280\partightenfactor0

\f2 \cf0 \kerning1\expnd0\expndtw0 \

\f0\b Function that return a function\

\f2\b0 Useful if you want to make multiple event handlers that are similar to each other, but not exactly alike\
https://fullstackopen.com/en/part1/a_more_complex_state_debugging_react_apps#function-that-returns-a-function\
\

\f0\b I don\'92t care if the folder is full, delete it\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f2\b0 \cf0 For example, if you used create-react-app but you didn\'92t want it to have its own git repository, run\
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3 \expnd0\expndtw0\kerning0
rm -rf .git\
\
\pard\pardeftab720\sl280\partightenfactor0

\f0\b\fs36 \cf0 \cb12 \kerning1\expnd0\expndtw0 Part 2\
\pard\pardeftab720\sl280\partightenfactor0

\fs24 \cf0 \cb1 \
Autocomplete console.log
\f2\b0 \
log + tab\
\

\f0\b Importing modules 
\f2\b0 \
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3 \expnd0\expndtw0\kerning0
import defaultExport from "module-name"; 
\f2 \cf6 <= Import entire module
\f1 \cf3 \
import \{ export1 \} from "module-name";\cf6  
\f2 <= Import a single export
\f1 \cf3 \
\
\pard\pardeftab720\sl280\partightenfactor0

\f0\b \cf0 \kerning1\expnd0\expndtw0 Exporting modules/stuff from modules
\f1\b0 \cf3 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl360\partightenfactor0

\f3 \cf13 \cb5 export\cf6  \cf13 default\cf6  \cf4 Note\cf6 \cb1 \
\cf13 \cb5 export\cf6  \{ \cf11 myFunction\cf6 , \cf4 myVariable\cf6  \};\cb1 \
\cf13 \cb5 export\cf6  \cf9 const\cf6  \cf11 myFunction\cf6  = () \cf9 =>\cf6  \'85\cb1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f2 \cf0 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\sl280\partightenfactor0

\f0\b \cf0 Forms, controlled forms\

\f2\b0 Add an onSubmit event handler to the form itself, and an onChange to the input fields. Save the values in state. Set the values of input fields to state (thus controlled form). On submit, prevent event default and use field values in state to make your object, whatever. \
\

\f0\b Filtering results\
\pard\pardeftab720\sl280\partightenfactor0

\f1\b0 \cf3 \expnd0\expndtw0\kerning0
const notesToShow = showAll ? notes : notes.filter(note => note.important === true)\cf6 \
\pard\pardeftab720\sl280\partightenfactor0

\f2 \cf0 \kerning1\expnd0\expndtw0 \

\f0\b Add devDependency \
\pard\pardeftab720\sl280\partightenfactor0

\f1\b0 \cf3 \expnd0\expndtw0\kerning0
npm install <package-name> --save-dev\
\pard\pardeftab720\sl280\partightenfactor0

\f2 \cf0 \kerning1\expnd0\expndtw0 \

\f0\b Scripts in package.json
\f2\b0 \
Stuff that was in there originally, like start: 
\f1 \cf3 npm start
\f2 \cf0 \
Stuff that wasn\'92t (scripts you added)\cf3  npm run nameofscript\cf0 \
\

\f0\b Using JSON server
\f2\b0 \
Make a fake database file in the root directory (not inside src, the main folder!) called db.json and put some stuff in it. For example, an object with an array inside it \{notes: [\'93one\'94, \'93two\'94, \'93three]\}\
Install json-server as a dev dependency.\
To keep it running,\
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf0 npm run json-server --watch db.json --port 3001
\f2 \
package.json script==>\

\f1 \'93server": "json-server --watch db.json --port 3001"
\f2 \
\
Your \'93notes\'94 array will be a\cf6 t\cb5  
\f4 \expnd0\expndtw0\kerning0
\ul http://localhost:3001/notes\cb1 \ulnone  \
\pard\pardeftab720\sl280\partightenfactor0

\f2 \cf6 More details on how it behaves https://github.com/typicode/json-server\cf0 \kerning1\expnd0\expndtw0 \
\
\pard\pardeftab720\sl280\partightenfactor0

\f0\b \cf0 Axios 
\f2\b0 \
Install axios for making requests, and import it as needed\
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3 \expnd0\expndtw0\kerning0
import axios from 'axios'\
\pard\pardeftab720\sl280\partightenfactor0

\f2 \cf0 \kerning1\expnd0\expndtw0 \
eventually separate requests out to a services folder. One file for each endpoint? blogs.js for doing stuff to \'93/api/blogs,\'94 etc\
\
useEffect set to empty array, for when the component first mounts, and event handlers are good places to tell axios to do things. \
\
It\'92s easiest to save a base url \
\pard\pardeftab720\sl360\partightenfactor0

\f1 \cf9 \cb5 \expnd0\expndtw0\kerning0
const\cf6  \cf10 baseUrl\cf6  = \cf7 "/api/blogs"\cf6 ;
\f2 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\sl280\partightenfactor0
\cf0 \
You can write as an async function or not, just return response data. \
\pard\pardeftab720\sl360\partightenfactor0

\f1 \cf9 \cb5 \expnd0\expndtw0\kerning0
const\cf6  \cf11 getAll\cf6  = () \cf9 =>\cf6  \{\cb1 \
\cb5   \cf9 const\cf6  \cf10 request\cf6  = \cf10 axios\cf6 .\cf11 get\cf6 (\cf10 baseUrl\cf6 );\cb1 \
\cb5   \cf13 return\cf6  \cf10 request\cf6 .\cf11 then\cf6 ((\cf4 response\cf6 ) \cf9 =>\cf6  \cf4 response\cf6 .\cf4 data\cf6 );\cb1 \
\cb5 \};\cb1 \
\
\cf9 \cb5 const\cf6  \cf11 deleteBlog\cf6  = \cf9 async\cf6  (\cf4 id\cf6 ) \cf9 =>\cf6  \{\cb1 \
\cb5   \cf9 const\cf6  \cf10 response\cf6  = \cf13 await\cf6  \cf10 axios\cf6 .\cf11 delete\cf6 (\cf7 `\cf9 $\{\cf10 baseUrl\cf9 \}\cf7 /\cf9 $\{\cf4 id\cf9 \}\cf7 `\cf6 , \cf4 config\cf6 );\cb1 \
\cb5   \cf13 return\cf6  \cf10 response\cf6 .\cf4 data\cf6 ;\cb1 \
\cb5 \};
\f3 \
\
\pard\pardeftab720\sl280\partightenfactor0

\f2 \cf0 \cb1 \kerning1\expnd0\expndtw0 Shorthand, config optional
\f3 \cf6 \cb5 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 axios\cf6 .\cf11 get\cf6 (\cf4 url\cf6 [, \cf4 config\cf6 ])\cb1 \
\cf4 \cb5 axios\cf6 .\cf11 delete\cf6 (\cf4 url\cf6 [, \cf4 config\cf6 ])\cb1 \
\cf4 \cb5 axios\cf6 .\cf11 post\cf6 (\cf4 url\cf6 [, \cf4 data\cf6 [, \cf4 config\cf6 ]])\cb1 \
\cf4 \cb5 axios\cf6 .\cf11 put\cf6 (\cf4 url\cf6 [, \cf4 data\cf6 [, \cf4 config\cf6 ]])\cb1 \
\cf4 \cb5 axios\cf6 .\cf11 patch\cf6 (\cf4 url\cf6 [, \cf4 data\cf6 [, \cf4 config\cf6 ]])\cb1 \
\pard\pardeftab720\sl280\partightenfactor0

\f2 \cf0 \kerning1\expnd0\expndtw0 Longhand, for reference\
\pard\pardeftab720\sl280\partightenfactor0

\f5\b \cf6 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl360\partightenfactor0

\f3\b0 \cf11 \cb5 axios\cf6 (\{\cb1 \
\cb5   \cf4 method:\cf6  \cf7 'post'\cf6 ,\cb1 \
\cb5   \cf4 url:\cf6  \cf7 '/login'\cf6 ,\cb1 \
\cb5   \cf4 data:\cf6  \{\cb1 \
\cb5     \cf4 firstName:\cf6  \cf7 'Finn'\cf6 ,\cb1 \
\cb5     \cf4 lastName:\cf6  \cf7 'Williams'\cf6 \cb1 \
\cb5   \}\cb1 \
\cb5 \});\cb1 \
\pard\pardeftab720\sl280\partightenfactor0

\f5\b \cf6 \
\pard\pardeftab720\sl280\partightenfactor0

\f2\b0 \cf0 \kerning1\expnd0\expndtw0 \
The response will contain the new added whatever it is in response.data.\
\

\f0\b Adding an error handler to a promise chain\

\f2\b0 blogHandler.getAll().then(blogs=> stuff).catch(error=> console.log(error));
\f0\b \

\f2\b0 \

\f0\b Replacing a changed member of an array \
\pard\pardeftab720\sl280\partightenfactor0

\f1\b0 \cf3 \expnd0\expndtw0\kerning0
updatedArray = notes.map(note => note.id === newNoteId ? newNote : note)
\f2 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\pardeftab720\sl280\partightenfactor0

\f0\b \cf0 Saving an api key in process.env
\f2\b0 \
Make an .env file and put your api key in it \
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3 \expnd0\expndtw0\kerning0
REACT_APP_API_KEY='t0p53cr3t4p1k3yv4lu3'\cf6 \
\pard\pardeftab720\sl280\partightenfactor0

\f2 \cf0 \kerning1\expnd0\expndtw0 \
You can get the key in your code with 
\f1 \cf3 \expnd0\expndtw0\kerning0
process.env.REACT_APP_API_KEY\cf6 \

\f2 \cf0 \kerning1\expnd0\expndtw0 \
Make sure you have a .gitignore file with .env (and node_modules for that matter)\
\

\f0\b Timed error message \

\f2\b0 Make a message component that receives a message as props, returns null if message is null and the component if otherwise\
\
Store message in state in a parent component. Then have a function for displaying message, and a timeout for resetting the message to null. \
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf6 \expnd0\expndtw0\kerning0
 setMessage(`This is my message`)\
setTimeout(() => \{setErrorMessage(null)\}, 5000)\
\pard\pardeftab720\sl280\partightenfactor0

\f2 \cf0 \kerning1\expnd0\expndtw0 \
Put message component in appropriate spot inside render so it will pop up as needed.\
\
\pard\pardeftab720\sl280\partightenfactor0

\f0\b\fs36 \cf0 \cb14 Part 3\
\pard\pardeftab720\sl280\partightenfactor0

\f2\b0\fs24 \cf0 \cb1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 Implementing the backend! Node!\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \ul \ulc0 https://fullstackopen.com/en/part3/node_js_and_express\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \ulnone Go to the appropriate directory, type
\f6  \cf15 npm init\cf6 , and answer ?s
\f2 \cf0 \
Make sure main is index.js. not much else is important\
Open resulting package.json and add 
\f6 \cf16 \expnd0\expndtw0\kerning0
"start": "node index.js"
\f2 \cf6  to scripts. \
Make an index.js file\
Install express (
\f6 \cf16 npm install express
\f2 \cf6 )\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b \cf6 Importing in Node\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f2\b0 \cf6 const whathaveyou = require(\'93thing\'94);\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b \cf6 Express 
\f2\b0 is the less cumbersome way to make a web server in Node than the built-in http kind. It can guess the right status code and the content type so you don\'92t have to specify, and it will change things into JSON format for you if you call response.json\
\
\ul https://fullstackopen.com/en/part3/node_js_and_express#web-and-express\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf6 \ulnone Basic app is \
\pard\pardeftab720\sl280\partightenfactor0

\f6 \cf16 const express = require('express')\
const app = express()\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f2 \cf6 App needs to use express.json() middleware to parse JSON data coming from incoming requests. \
\'93
\f4 The json-parser functions so that it takes the JSON data of a request, transforms it into a JavaScript object and then attaches it to the 
\f7\i body
\f4\i0  property of the 
\f7\i request
\f4\i0  object before the route handler is called.\'94\

\f2 So incoming JSON data gets turned into a \{name: \'93Satsuki\'94, color: \'93black\'94\} object living inside request.body. So you can get name from request.body.name, for example.\
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3 app.use(express.json())\
\pard\pardeftab720\sl280\partightenfactor0

\f6 \cf16 \
\pard\pardeftab720\sl280\partightenfactor0

\f0\b \cf6 Controllers
\f2\b0 \
Then, various responses to .get and .post and whatever, \
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3 app.get('/', (request, response, next) => \{\
  
\f3 \cf4 \cb5 response\cf6 .\cf11 status\cf6 (\cf8 201\cf6 ).\cf11 json\cf6 (\cf10 populatedBlog\cf6 );
\f1 \cf3 \cb1 \
\})\
\pard\pardeftab720\sl280\partightenfactor0

\f2 \cf6 \
Usually it\'92ll be response.json(some data), unless you need to specify something other than 200 OK.\
Express sends 200 OK as a default, and can automatically send some error codes too\
If you want to just send a # response, do response.status(200).end()\
End is \'93
\f4 Used to quickly end the response without any data\'94\
\

\f2 Put in error handling:\
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3     .catch(error => next(error))\cf6 \
\pard\pardeftab720\sl280\partightenfactor0

\f2 \cf6 and add next to (request, response, next) if you haven\'92t yet.\
Of course you\'92ll need an error handler to do anything with that next\
\

\f0\b Getting a parameter out of a route
\f2\b0 \
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3 app.get('/api/notes/:id', (request, response) => \{\
  const id = request.params.id\
\'85.
\f2 \cf6 \
\
\pard\pardeftab720\sl280\partightenfactor0

\f0\b \cf6 Statuses
\f2\b0 \
200 OK \
201 Created: good response for after POST/PUT request\
204 No content: a nice response for successful DELETE request\
400 Bad request: for incomplete/wrong request. Like you need a \{title: \'93Blah\'94 author: \'93Blah\'94\} but there\'92s no author or something. Too short password. Etc.\
401 Unauthorized: we needed a token but the token\'92s messed up\
404 Not found: unknown endpoint\
418 I\'92m a teapot: I don\'92t make coffee\
\

\f0\b Listening to port
\f2\b0 \
then define the port and ask app to listen to that port.\
\pard\pardeftab720\sl360\partightenfactor0

\f3 \cf6 \
\cf9 \cb5 const\cf6  \cf10 PORT\cf6  = \cf8 3001\cf6 \cb1 \
\cf4 \cb5 app\cf6 .\cf11 listen\cf6 (\cf10 PORT\cf6 , () \cf9 =>\cf6  \{\cb1 \
\cb5   \cf4 console\cf6 .\cf11 log\cf6 (\cf7 `Server running on port \cf9 $\{\cf10 PORT\cf9 \}\cf7 `\cf6 )\cb1 \
\cb5 \})\cb1 \
\pard\pardeftab720\sl280\partightenfactor0

\f6 \cf15 \
\pard\pardeftab720\sl280\partightenfactor0

\f2 \cf6 Eventually these will be split out into controllers for .get .post etc, listening at PORT will be in index.js
\f1 \cf15 \
\pard\pardeftab720\sl280\partightenfactor0
\cf6 \
\pard\pardeftab720\sl280\partightenfactor0

\f2 \cf6 Set up 
\f0\b nodemon 
\f2\b0 as a development dependency so you don\'92t have to constantly restart the application to see changes\
\pard\pardeftab720\sl280\partightenfactor0

\f6 \cf15 npm install --save-dev nodemon\cf6 \
\pard\pardeftab720\sl280\partightenfactor0

\f2 \cf6 \
Add 
\f6 \cf16 "dev": "nodemon index.js
\f1 " 
\f2 \cf6 to scripts so you can start your app with nonodemon with \
\pard\pardeftab720\sl280\partightenfactor0

\f8\b \cf16 npm run dev\

\f5 \
\pard\pardeftab720\sl280\partightenfactor0

\f0 \cf6 Testing one: using Postman and the Visual Studio Code REST client\

\f2\b0 These are both used to make test requests, and we prefer VS Code. Put requests in a requests folder, inside a rest file. all_requests.rest\
\
Separate with a ###, then the name of method, then URL, content type, a new line, the data you\'92re sending. \
\
\pard\pardeftab720\sl360\partightenfactor0

\f3 \cf6 \cb5 ###\cb1 \
\cf10 \cb5 POST\cf6  http:\cf17 //localhost:3003/api/blogs\cf6 \cb1 \
\cf4 \cb5 Content\cf6 -Type: \cf4 application\cf6 /\cf4 json\cf6 \cb1 \
\
\cb5 \{\cb1 \
\cb5     \cf7 "title"\cf6 : \cf7 "Budget Bytes"\cf6 ,\cb1 \
\cb5     \cf7 "author"\cf6 : \cf7 "Beth"\cf6 ,\cb1 \
\cb5     \cf7 "url"\cf6 : \cf7 "https://www.budgetbytes.com/"\cf6 ,\cb1 \
\cb5     \cf7 "likes"\cf6 : \cf8 5\cf6 \cb1 \
\cb5 \}\cb1 \
\pard\pardeftab720\sl280\partightenfactor0

\f5\b \cf16 \
\
\pard\pardeftab720\sl280\partightenfactor0

\f0 \cf6 MIddleware\

\f2\b0 Put middleware inside a utils folder.\
Other middleware besides express.json needs to go after it somewhere, otherwise we won\'92t get content of request parsed out of JSON.\
You use middleware by importing it, then calling app.use(middlewareName);\
Some middleware functions will go before the routes are called: the logger, and the token extractor if we have one.\
Some middleware will come after routes: the unknown endpoint handler, and the error handler. Error handler has to be last.\
\

\f0\b Connecting front end to back end locally, and being thwarted by CORS
\f5 \cf16 \

\f2\b0 \cf6 Install cors\
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3 npm install cors\
\pard\pardeftab720\sl280\partightenfactor0

\f5\b \cf3 \
\pard\pardeftab720\sl360\partightenfactor0

\f3\b0 \cf9 \cb5 const\cf6  \cf11 cors\cf6  = \cf11 require\cf6 (\cf7 'cors'\cf6 )\cb1 \
\cf4 \cb5 app\cf6 .\cf11 use\cf6 (\cf11 cors\cf6 ())\cb1 \
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf6 \
\pard\pardeftab720\sl280\partightenfactor0

\f2 \cf6 Cors middleware goes before express.json
\f5\b \cf16 \
\

\f0 \cf6 Deploying to Heroku\
\pard\pardeftab720\sl280\partightenfactor0

\f4\b0 \cf6 Add a file called 
\f7\i Procfile
\f4\i0  to the project's root to tell Heroku how to start the application. \
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3 web: npm start\cf6 \
\pard\pardeftab720\sl280\partightenfactor0

\f2 \cf6 Change port to 
\f1 process.env.PORT || 3001 
\f2 so it\'92s either default 3001 locally, or whatever process.env.PORT set inside Heroku. 
\f1 \

\f2 Make a .gitignore file in the root folder that ignores node_modules\
\pard\pardeftab720\sl280\partightenfactor0

\f4 \cf6 Create a Heroku application with the command 
\f1 \cf3 heroku create
\f4 \cf6 , commit your code to the repository and move it to Heroku with command 
\f7\i git push heroku main
\f4\i0 .
\f2  
\f5\b \cf16 \
\pard\pardeftab720\sl280\partightenfactor0

\f2\b0 \cf6 You can access continual heroku logs with 
\f9\i \cf3 h
\f1\i0 eroku logs -t
\f5\b \cf16 \
\

\f0 \cf6 If you want to host front and backend in the same spot\

\f2\b0 See here (part 3b, serving static files from the backend):
\f0\b \

\f2\b0 https://fullstackopen.com/en/part3/deploying_app_to_internet#serving-static-files-from-the-backend\
Change urls to backend to relative urls, run a build, copy build folder to backend, and use express static middleware \
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3 app.use(express.static('build'))\
\pard\pardeftab720\sl280\partightenfactor0

\f2 \cf6 There are a bunch of scripts to simplify updating the frontend on Heroku, and how to still connect to local server in dev move despite relative URLs. See link.
\f1 \cf16 \
\pard\pardeftab720\sl280\partightenfactor0

\f5\b \cf16 \
\pard\pardeftab720\sl280\partightenfactor0

\f0 \cf6 MongoDB
\f5 \cf16 \
\pard\pardeftab720\sl280\partightenfactor0

\f2\b0 \cf6 \ul \ulc6 https://fullstackopen.com/en/part3/saving_data_to_mongo_db#backend-connected-to-a-database
\f5\b \cf16 \ulc16 \
\pard\pardeftab720\sl280\partightenfactor0

\f2\b0 \cf6 \ulnone Create a cluster. Choose AWS and one of the free regions.\
When it\'92s ready, go into database access and set a username and password with privileges. Whitelist all IP addresses (not that it\'92ll do you much good)\
Click connect. MongoDB will give you some bullshit connection string that won\'92t work. Use the slightly older one.\
\

\f0\b Mongoose\

\f2\b0 We will use Mongoose to talk with MongoDB. Install mongoose. \
\
inside App \
\pard\pardeftab720\sl360\partightenfactor0

\f3 \cf9 \cb5 const\cf6  \cf18 mongoose\cf6  = \cf11 require\cf6 (\cf7 "mongoose"\cf6 );\
\cf9 const\cf6  \cf10 config\cf6  = \cf11 require\cf6 (\cf7 "./utils/config"\cf6 );\cb1 \
\
\cf9 \cb5 const\cf6  \cf10 mongoUrl\cf6  = \cf4 config\cf6 .\cf4 MONGODB_URI\cf6 ;\cb1 \
\
\cf18 \cb5 mongoose\cf6 \cb1 \
\cb5   .\cf11 connect\cf6 (\cf10 mongoUrl\cf6 , \{\cb1 \
\cb5     \cf4 useNewUrlParser:\cf6  \cf9 true\cf6 ,\cb1 \
\cb5     \cf4 useUnifiedTopology:\cf6  \cf9 true\cf6 ,\cb1 \
\cb5     \cf4 useFindAndModify:\cf6  \cf9 false\cf6 ,\cb1 \
\cb5     \cf4 useCreateIndex:\cf6  \cf9 true\cf6 ,\cb1 \
\cb5   \})\cb1 \
\cb5   .\cf11 then\cf6 (() \cf9 =>\cf6  \{\cb1 \
\cb5     \cf4 logger\cf6 .\cf11 info\cf6 (\cf7 "Successfully connected to the database"\cf6 );\cb1 \
\cb5   \})\cb1 \
\cb5   .\cf11 catch\cf6 ((\cf4 err\cf6 ) \cf9 =>\cf6  \{\cb1 \
\cb5     \cf4 logger\cf6 .\cf11 info\cf6 (\cf7 "Didn't connect to database and here's the error"\cf6 , \cf4 err\cf6 );\cb1 \
\cb5   \});\cb1 \
\pard\pardeftab720\sl280\partightenfactor0

\f2 \cf6 \
The connect URL and PORT lives insides a .env file, accessed by config inside the utils folder. Config needs dotenv to access the .env file\
Gitinore the .env file or else!!1\
\
Inside config\
\
\pard\pardeftab720\sl360\partightenfactor0

\f3 \cf11 \cb5 require\cf6 (\cf7 "dotenv"\cf6 ).\cf11 config\cf6 ();\cb1 \
\
\cf9 \cb5 let\cf6  \cf4 MONGODB_URI\cf6  = \cf4 process\cf6 .\cf4 env\cf6 .\cf10 MONGODB_URI\cf6 ;\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf13 \cb5 if\cf6  (\cf4 process\cf6 .\cf4 env\cf6 .\cf10 NODE_ENV\cf6  === \cf7 "test"\cf6 ) \{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5   \cf4 MONGODB_URI\cf6  = \cf4 process\cf6 .\cf4 env\cf6 .\cf10 MONGODB_URI_TEST\cf6 ;\cb1 \
\cb5 \}\cb1 \
\cf9 \cb5 const\cf6  \cf10 PORT\cf6  = \cf8 3001\cf6 ;\cb1 \
\
\cf18 \cb5 module\cf6 .\cf18 exports\cf6  = \{ \cf4 MONGODB_URI\cf6 , \cf4 PORT\cf6  \};\cb1 \
\
\pard\pardeftab720\sl280\partightenfactor0

\f8\b \cf6 Making schemas\

\f6\b0 We need to define the shape of the documents within each collection (a Schema), and then make a constructor for making new ones (a model)\
Make a models folder and define each in a lower case, singular file\
blog.js\
Name of schema: blogSchema\
Name of model
\f8\b : 
\f6\b0 Blog\
Name of collection up on MondoDB (automatic): blogs\
\
A simple schema \
\
\pard\pardeftab720\sl360\partightenfactor0

\f3 \cf9 \cb5 const\cf6  \cf18 mongoose\cf6  = \cf11 require\cf6 (\cf7 "mongoose"\cf6 );\cb1 \
\pard\pardeftab720\sl280\partightenfactor0

\f6 \cf6 \
\pard\pardeftab720\sl360\partightenfactor0

\f3 \cf9 \cb5 const\cf6  \cf10 blogSchema\cf6  = \cf9 new\cf6  \cf18 mongoose\cf6 .\cf18 Schema\cf6 (\{\cb1 \
\cb5   \cf4 title:\cf6  String,\cb1 \
\cb5   \cf18 likes\cf4 :\cf6  \cf18 Number\cf6 \cb1 \
\cb5 \});\
\
\cf10 blogSchema\cf6 .\cf11 set\cf6 (\cf7 "toJSON"\cf6 , \{\cb1 \
\cb5   \cf11 transform\cf4 :\cf6  (\cf4 document\cf6 , \cf4 returnedObject\cf6 ) \cf9 =>\cf6  \{\cb1 \
\cb5     \cf4 returnedObject\cf6 .\cf4 id\cf6  = \cf4 returnedObject\cf6 .\cf4 _id\cf6 .\cf11 toString\cf6 ();\cb1 \
\cb5     \cf9 delete\cf6  \cf4 returnedObject\cf6 .\cf4 _id\cf6 ;\cb1 \
\cb5     \cf9 delete\cf6  \cf4 returnedObject\cf6 .\cf4 __v\cf6 ;\cb1 \
\cb5   \},\cb1 \
\cb5 \});\cb1 \
\
\cf18 \cb5 module\cf6 .\cf18 exports\cf6  = \cf18 mongoose\cf6 .\cf11 model\cf6 (\cf7 "Blog"\cf6 , \cf10 blogSchema\cf6 );\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0

\f6 \cf6 \cb5 Setting toJSON means we can edit what gets passed back. We can delete private _id and _v and change _id from its original object to a string.\
\pard\pardeftab720\sl360\partightenfactor0

\f3 \cf6 \
\pard\pardeftab720\sl280\partightenfactor0

\f8\b \cf6 \cb1 Working with MongoDB inside controllers\

\f6\b0 Import the models you need and use commands like findOne, findById, .save(), use the constructor as needed to make new mongo objects.\
These commands are async so you\'92ll need to for example, make that controller async and use await.\
\pard\pardeftab720\sl360\partightenfactor0

\f3 \cf9 \cb5 const\cf6  \cf10 user\cf6  = \cf13 await\cf6  \cf4 User\cf6 .\cf11 findById\cf6 (\cf10 decodedToken\cf6 .\cf4 id\cf6 );\cb1 \
\pard\pardeftab720\sl280\partightenfactor0

\f6 \cf6 findByIdAndUpdate usually returns the original document, so set it to return changed document if that\'92s what you need. \
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3 Note.findByIdAndUpdate(request.params.id, note, \{ new: true \})\
\pard\pardeftab720\sl280\partightenfactor0

\f6 \cf6 The id, the new document, the new setting.\
\

\f8\b Setting environment variables in Heroku\

\f6\b0 Either use the command line \
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3 heroku config:set MONGODB_URI=mongodb+srv://fullstack:secretpasswordhere@cluster0-ostce.mongodb.net/note-app?retryWrites=true\
\pard\pardeftab720\sl280\partightenfactor0

\f6 \cf6 or set it inside Heroku dashboard in browser. Settings => config variables.\

\f8\b \
\pard\pardeftab720\sl280\partightenfactor0

\f0\fs36 \cf6 \cb19 \kerning1\expnd0\expndtw0 Part 4\
\pard\pardeftab720\sl280\partightenfactor0

\f8\fs24 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
Testing Node applications!
\f6\b0 \
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3 npm install --save-dev jest\
\
\pard\pardeftab720\sl280\partightenfactor0

\f6 \cf6 add script:\
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3   "test": "jest --verbose"\
\pard\pardeftab720\sl280\partightenfactor0

\f3 \cf6 \
Then either add \
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3 "jest": \{\
   "testEnvironment": "node"\
 \}\
\pard\pardeftab720\sl280\partightenfactor0

\f6 \cf6 to the end of package.json, or make a new file 
\f7\i jest.config.js
\f6\i0  containing this:\
\pard\pardeftab720\sl360\partightenfactor0

\f3 \cf10 \cb5 module\cf6 .\cf10 exports\cf6  = \{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5   \cf4 testEnvironment:\cf6  \cf7 'node'\cf6 ,\cb1 \
\cb5 \};\cb1 \
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3 \
\pard\pardeftab720\sl280\partightenfactor0

\f6 \cf6 Make a tests directory and name your tests testname.test.js\
\
The test:\
import your function\
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3 const palindrome = require('../utils/for_testing').palindrome\
\pard\pardeftab720\sl280\partightenfactor0

\f6 \cf6 The thing inside parans is relative path to file, for_testing is file name, .palindrome is name of the function\
\
two tests inside a describe block, with import
\f1 \
\pard\pardeftab720\sl280\partightenfactor0

\f6 \cf3 \
\pard\pardeftab720\sl360\partightenfactor0

\f3 \cf9 \cb5 const\cf6  \cf11 average\cf6  = \cf11 require\cf6 (\cf7 '../utils/for_testing'\cf6 ).\cf11 average\cf6 \cb1 \
\
\cf11 \cb5 describe\cf6 (\cf7 'average'\cf6 , () \cf9 =>\cf6  \{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5   \cf11 test\cf6 (\cf7 'of one value is the value itself'\cf6 , () \cf9 =>\cf6  \{\cb1 \
\cb5     \cf11 expect\cf6 (\cf11 average\cf6 ([\cf8 1\cf6 ])).\cf11 toBe\cf6 (\cf8 1\cf6 )\cb1 \
\cb5   \})\cb1 \
\
\cb5   \cf11 test\cf6 (\cf7 'of many is calculated right'\cf6 , () \cf9 =>\cf6  \{\cb1 \
\cb5     \cf11 expect\cf6 (\cf11 average\cf6 ([\cf8 1\cf6 , \cf8 2\cf6 , \cf8 3\cf6 , \cf8 4\cf6 , \cf8 5\cf6 , \cf8 6\cf6 ])).\cf11 toBe\cf6 (\cf8 3.5\cf6 )\cb1 \
\cb5   \})\cb1 \
\
\cb5 \})
\f1 \cb1 \
\pard\pardeftab720\sl280\partightenfactor0
\cf6 \
\
\pard\pardeftab720\sl280\partightenfactor0

\f6 \cf6 Run npm test (script added above) to do all, or run a single test with only method (describe.only or test.only) \
Or, use this to run a single test or block 
\f1 \cf3 npm test -- -t 'when list has only one blog, equals the likes of that'\cf6 \

\f6 You can just type part of the name and that\'92ll run whatever contains that fragment
\f1 \
\

\f8\b Testing the backend app with a fake API (\'93integration tests\'94)\

\f6\b0 We need to change so that app runs on either production or development mode, with a corresponding change to which database we access in MongoDB\
\
Add scripts\
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3 "start": "NODE_ENV=production node index.js",    \
"dev": "NODE_ENV=development nodemon index.js",\cf6 \
\pard\pardeftab720\sl280\partightenfactor0

\f6 \cf6 add/replace script:\
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3 "test": "NODE_ENV=test jest --verbose --runInBand"\
\
\pard\pardeftab720\sl280\partightenfactor0

\f6 \cf6 Add to config file
\f1 \cf3 \
const MONGODB_URI = process.env.NODE_ENV === 'test' ? process.env.TEST_MONGODB_URI  : process.env.MONGODB_URI\
\

\f6 \cf6 Add URL to test mongo db in .env file (remember new databases just appear when you change the name part inside URL)\
\
Install supertest\
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3 npm install --save-dev supertest\
\
\pard\pardeftab720\sl280\partightenfactor0

\f6 \cf6 Imports and stuff
\f1 \cf3 \
\pard\pardeftab720\sl360\partightenfactor0

\f3 \cf9 \cb5 const\cf6  \cf18 mongoose\cf6  = \cf11 require\cf6 (\cf7 'mongoose'\cf6 )\cb1 \
\cf9 \cb5 const\cf6  \cf11 supertest\cf6  = \cf11 require\cf6 (\cf7 'supertest'\cf6 )\cb1 \
\cf9 \cb5 const\cf6  \cf10 app\cf6  = \cf11 require\cf6 (\cf7 '../app'\cf6 )\cb1 \
\cf9 \cb5 const\cf6  \cf10 Blog\cf6  = \cf11 require\cf6 (\cf7 "../models/blog"\cf6 )\cb1 \
\
\cf9 \cb5 const\cf6  \cf10 api\cf6  = \cf11 supertest\cf6 (\cf10 app\cf6 )\cb1 \
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3 \
\pard\pardeftab720\sl280\partightenfactor0

\f6 \cf6 A sample test with before each and close connection at the end. testHelper.blogs is a list of objects that was imported. The Blog model (the constructor) also need to be imported.\
\pard\pardeftab720\sl360\partightenfactor0

\f3 \cf11 \cb5 beforeEach\cf6 (\cf9 async\cf6  () \cf9 =>\cf6  \{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5   \cf13 await\cf6  \cf4 Blog\cf6 .\cf11 deleteMany\cf6 (\{\});\cb1 \
\cb5   \cf9 const\cf6  \cf10 blogObjects\cf6  = \cf4 testHelper\cf6 .\cf10 blogs\cf6 .\cf11 map\cf6 ((\cf4 blog\cf6 ) \cf9 =>\cf6  \cf9 new\cf6  \cf11 Blog\cf6 (\cf4 blog\cf6 ));\cb1 \
\cb5   \cf9 const\cf6  \cf10 promises\cf6  = \cf10 blogObjects\cf6 .\cf11 map\cf6 ((\cf4 blogObject\cf6 ) \cf9 =>\cf6  \cf4 blogObject\cf6 .\cf11 save\cf6 ());\cb1 \
\cb5   \cf13 await\cf6  \cf18 Promise\cf6 .\cf11 all\cf6 (\cf10 promises\cf6 );\cb1 \
\cb5 \});
\f1 \cf3 \cb1 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl360\partightenfactor0

\f3 \cf11 \cb5 test\cf6 (\cf7 "Successfully gets correct number of blogs"\cf6 , \cf9 async\cf6  () \cf9 =>\cf6  \{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5   \cf9 const\cf6  \cf10 response\cf6  = \cf13 await\cf6  \cf10 api\cf6 .\cf11 get\cf6 (\cf7 "/api/blogs"\cf6 ).\cf11 expect\cf6 (\cf8 200\cf6 );\cb1 \
\cb5   \cf11 expect\cf6 (\cf10 response\cf6 .\cf4 body\cf6 ).\cf11 toHaveLength\cf6 (\cf4 testHelper\cf6 .\cf10 blogs\cf6 .\cf4 length\cf6 );\cb1 \
\cb5 \});\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf11 afterAll\cf6 (() \cf9 =>\cf6  \{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5   \cf18 mongoose\cf6 .\cf10 connection\cf6 .\cf11 close\cf6 ();\cb1 \
\cb5 \});\cb1 \
\
\pard\pardeftab720\sl280\partightenfactor0

\f8\b \cf6 Using async/await for controller without try/catch
\f6\b0 \
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3 npm install express-async-errors\
\pard\pardeftab720\sl280\partightenfactor0

\f3 \cf6 \
Put library in app.js\
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3 require('express-async-errors')\
\pard\pardeftab720\sl280\partightenfactor0

\f3 \cf6 If you do that, you can get rid of next and the try-catch blocks in each router (controllers)\
\pard\pardeftab720\sl280\partightenfactor0

\f4 \cf6 \'93The library handles everything under the hood. If an exception occurs in a 
\f7\i async
\f4\i0  route, the execution is automatically passed to the error handling middleware.\'94\
\
\pard\pardeftab720\sl280\partightenfactor0

\f8\b \cf6 References across mongoDB collections
\f3\b0 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf9 \cb5 const\cf6  \cf10 userSchema\cf6  = \cf9 new\cf6  \cf4 mongoose\cf6 .\cf11 Schema\cf6 (\{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5   \cf18 username\cf4 :\cf6  \cf18 String\cf6 ,\cb1 \
\cb5   \cf18 name\cf4 :\cf6  \cf18 String\cf6 ,\cb1 \
\cb5   \cf18 passwordHash\cf4 :\cf6  \cf18 String\cf6 ,\cb1 \
\cb5   \cf4 notes:\cf6  [\cb1 \
\cb5     \{\cb1 \
\cb5       \cf4 type:\cf6  \cf4 mongoose\cf6 .\cf4 Schema\cf6 .\cf4 Types\cf6 .\cf4 ObjectId\cf6 ,\cb1 \
\cb5       \cf4 ref:\cf6  \cf7 'Note'\cf6 \cb1 \
\cb5     \}\cb1 \
\cb5   ],\cb1 \
\cb5 \})\cb1 \
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf6 \
\pard\pardeftab720\sl280\partightenfactor0

\f3 \cf6 Add id for notes as needed. When you return, populate the notes (assign 1 to whichever fields you want)\
Remember, inside MongoDB the id is _id, you call it id and make it a string when you *return* it.\
\pard\pardeftab720\sl360\partightenfactor0
\cf9 \cb5 const\cf6  \cf10 users\cf6  = \cf13 await\cf6  \cf4 User\cf6 .\cf11 find\cf6 (\{\}).\cf11 populate\cf6 (\cf7 "notes"\cf6 , \{ \cf4 content:\cf6  \cf8 1\cf6 , \cf4 date:\cf6  \cf8 1\cf6  \});\
\
\pard\pardeftab720\sl360\partightenfactor0

\f10\b \cf6 User administration\
\pard\pardeftab720\sl280\partightenfactor0

\f3\b0 \cf6 \cb1 Never store unencrypted plain text passwords in a database.\
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3 npm install bcrypt\cf6 \
\pard\pardeftab720\sl280\partightenfactor0

\f3 \cf6 Making a new user: the router\'92s post method will get the password from the body object, encrypt it, and save that.\
\pard\pardeftab720\sl360\partightenfactor0
\cf9 \cb5 const\cf6  \cf10 body\cf6  = \cf4 request\cf6 .\cf4 body\cf6 \cb1 \
\
\cf9 \cb5 const\cf6  \cf10 saltRounds\cf6  = \cf8 10\cf6 \cb1 \
\cf9 \cb5 const\cf6  \cf10 passwordHash\cf6  = \cf13 await\cf6  \cf4 bcrypt\cf6 .\cf11 hash\cf6 (\cf10 body\cf6 .\cf4 password\cf6 , \cf10 saltRounds\cf6 )\cb1 \
\
\cf9 \cb5 const\cf6  \cf10 user\cf6  = \cf9 new\cf6  \cf11 User\cf6 (\{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5   \cf4 username:\cf6  \cf10 body\cf6 .\cf4 username\cf6 ,\cb1 \
\cb5   \cf4 name:\cf6  \cf10 body\cf6 .\cf4 name\cf6 ,\cb1 \
\cb5   \cf4 passwordHash\cf6 ,\cb1 \
\cb5 \})
\f1 \cf3 \cb1 \
\pard\pardeftab720\sl280\partightenfactor0

\f3 \cf3 \
\pard\pardeftab720\sl360\partightenfactor0

\f10\b \cf6 \cb5 Validation with MongoDB\
\pard\pardeftab720\sl280\partightenfactor0

\f3\b0 \cf6 \cb1 Some stuff can be checked with built in validators, but uniqueness (like unique usernames) requires an outside library\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb5 npm\cf6  \cf4 install\cf6  \cf4 mongoose\cf6 -\cf4 unique\cf6 -\cf4 validator\cf6 \cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf9 \cb5 const\cf6  \cf11 uniqueValidator\cf6  = \cf11 require\cf6 (\cf7 'mongoose-unique-validator'\cf6 )\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5 \'85\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf9 \cb5 const\cf6  \cf10 userSchema\cf6  = \cf9 new\cf6  \cf4 mongoose\cf6 .\cf11 Schema\cf6 (\{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5   \cf4 username:\cf6  \{\cb1 \
\cb5     \cf18 type\cf4 :\cf6  \cf18 String\cf6 ,\cb1 \
\cb5     \cf4 unique:\cf6  \cf9 true\cf6   \},\cb1 \
\cb5   \cf18 name\cf4 :\cf6  \cf18 String\cf6 ,\cb1 \
\cb5   \cf18 passwordHash\cf4 :\cf6  \cf18 String\cf6 \cb1 \
\cb5 \}\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf10 \cb5 userSchema\cf6 .\cf11 plugin\cf6 (\cf11 uniqueValidator\cf6 )\cb1 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl280\partightenfactor0
\cf6 required, min/max for numbers, minLength and maxLength for strings etc are built in. unique is not and comes from mongoose-unique-validator\
\
\pard\pardeftab720\sl360\partightenfactor0

\f10\b \cf6 \cb5 Token authentication: login\
\pard\pardeftab720\sl280\partightenfactor0

\f1\b0 \cf3 \cb1 npm install jsonwebtoken\
\
\pard\pardeftab720\sl280\partightenfactor0

\f3 \cf6 Inside login controller\
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3 const jwt = require('jsonwebtoken')\
const bcrypt = require('bcrypt')\
\
\'85.\
\pard\pardeftab720\sl360\partightenfactor0

\f3 \cf9 \cb5 const\cf6  \cf10 user\cf6  = \cf13 await\cf6  \cf4 User\cf6 .\cf11 findOne\cf6 (\{ \cf4 username:\cf6  \cf4 body\cf6 .\cf4 username\cf6  \})\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5   \cf9 const\cf6  \cf10 passwordCorrect\cf6  = \cf10 user\cf6  === \cf9 null\cf6  ? \cf9 false\cf6  : \cf13 await\cf6  \cf4 bcrypt\cf6 .\cf11 compare\cf6 (\cf4 body\cf6 .\cf4 password\cf6 , \cf10 user\cf6 .\cf4 passwordHash\cf6 )\cb1 \
\
\cb5   \cf13 if\cf6  (!(\cf10 user\cf6  && \cf10 passwordCorrect\cf6 )) \{\cb1 \
\cb5     \cf13 return\cf6  \cf4 response\cf6 .\cf11 status\cf6 (\cf8 401\cf6 ).\cf11 json\cf6 (\{\cb1 \
\cb5       \cf4 error:\cf6  \cf7 'invalid username or password'\cf6 \cb1 \
\cb5     \})\cb1 \
\cb5   \}\cb1 \
\
\cb5   \cf9 const\cf6  \cf10 userForToken\cf6  = \{\cb1 \
\cb5     \cf4 username:\cf6  \cf10 user\cf6 .\cf4 username\cf6 ,\cb1 \
\cb5     \cf4 id:\cf6  \cf10 user\cf6 .\cf4 _id\cf6 ,\cb1 \
\cb5   \}\cb1 \
\
\cb5   \cf9 const\cf6  \cf10 token\cf6  = \cf4 jwt\cf6 .\cf11 sign\cf6 (\cf10 userForToken\cf6 , \cf4 process\cf6 .\cf4 env\cf6 .\cf10 SECRET\cf6 )\
\
\pard\pardeftab720\sl280\partightenfactor0

\f10\b \cf6 \cb1 !!!....breaking news....!!!\
\pard\pardeftab720\sl280\partightenfactor0

\f3\b0 \cf6 The new 2021 version adds a section where the token expires in an hour, also adding another block to errorhandler to handle an expired token\cb5 \
\pard\pardeftab720\sl360\partightenfactor0
\cf9 const\cf6  \cf10 token\cf6  = \cf4 jwt\cf6 .\cf11 sign\cf6 (    \cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5   \cf4 userForToken\cf6 ,     \cb1 \
\cb5   \cf4 process\cf6 .\cf4 env\cf6 .\cf10 SECRET\cf6 ,    \cb1 \
\cb5   \{ \cf4 expiresIn:\cf6  \cf8 60\cf6 *\cf8 60\cf6  \}  \cb1 \
\cb5   )\
\pard\pardeftab720\sl280\partightenfactor0

\f10\b \cf6 \cb1 !!!....breaking news....!!!
\f3\b0 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \
\cb5   \cf4 response\cf6 \cb1 \
\cb5     .\cf11 status\cf6 (\cf8 200\cf6 )\cb1 \
\cb5     .\cf11 send\cf6 (\{ \cf4 token\cf6 , \cf4 username:\cf6  \cf10 user\cf6 .\cf4 username\cf6 , \cf4 name:\cf6  \cf10 user\cf6 .\cf4 name\cf6  \})\cb1 \
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf6 \
\pard\pardeftab720\sl280\partightenfactor0

\f3 \cf6 Set the value for SECRET in your process.env file. If the username exists and the password fits passwordHash, jsonwebtoken returns a signed token with process.env.SECRET and whatever info the front end needs to save about user.\
\
\pard\pardeftab720\sl280\partightenfactor0

\f10\b \cf6 Requiring a signed token from the user\'92s end\
\pard\pardeftab720\sl280\partightenfactor0

\f3\b0 \cf6 We used Authorization header where the Authorization header has value \
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3 Bearer <~~~the long ass token~~~>\cf6 \
\
\
\pard\pardeftab720\sl280\partightenfactor0

\f3 \cf6 Use a helper function inside the router to check token \
\pard\pardeftab720\sl360\partightenfactor0
\cf9 \cb5 const\cf6  \cf10 jwt\cf6  = \cf11 require\cf6 (\cf7 "jsonwebtoken"\cf6 );\cb1 \
\
\cf9 \cb5 const\cf6  \cf11 getTokenFrom\cf6  = (\cf4 request\cf6 ) \cf9 =>\cf6  \{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5   \cf9 const\cf6  \cf10 authorization\cf6  = \cf4 request\cf6 .\cf11 get\cf6 (\cf7 "authorization"\cf6 );\cb1 \
\cb5   \cf13 if\cf6  (\cf4 authorization\cf6  && \cf4 authorization\cf6 .\cf11 toLowerCase\cf6 ().\cf11 startsWith\cf6 (\cf7 "bearer "\cf6 )) \{\cb1 \
\cb5     \cf13 return\cf6  \cf4 authorization\cf6 .\cf11 substring\cf6 (\cf8 7\cf6 );\cb1 \
\cb5   \}\cb1 \
\cb5   \cf13 return\cf6  \cf9 null\cf6 ;\cb1 \
\cb5 \};\cb1 \
\
inside whatever requires a token\'85\
\cb5   \cf9 const\cf6  \cf10 decodedToken\cf6  = \cf4 jwt\cf6 .\cf11 verify\cf6 (\cf10 token\cf6 , \cf4 process\cf6 .\cf4 env\cf6 .\cf10 SECRET\cf6 );\cb1 \
\cb5   \cf13 if\cf6  (!\cf10 token\cf6  || !\cf10 decodedToken\cf6 .\cf4 id\cf6 ) \{\cb1 \
\cb5     \cf13 return\cf6  \cf4 response\cf6 .\cf11 status\cf6 (\cf8 401\cf6 ).\cf11 json\cf6 (\{ \cf4 error:\cf6  \cf7 "token missing or invalid"\cf6  \});\cb1 \
\cb5   \}\cb1 \
\cb5   \cf9 const\cf6  \cf10 user\cf6  = \cf13 await\cf6  \cf4 User\cf6 .\cf11 findById\cf6 (\cf10 decodedToken\cf6 .\cf4 id\cf6 );\cb1 \
\
\pard\pardeftab720\sl280\partightenfactor0

\f10\b \cf6 Note about security\
\pard\pardeftab720\sl280\partightenfactor0

\f3\b0 \cf6 The app uses an http server, but that\'92s OK: \'93
\f4 Heroku routes all traffic between a browser and the Heroku server over HTTPS.\'94
\f3  \
\
\pard\pardeftab720\sl280\partightenfactor0

\f0\b\fs36 \cf6 \cb20 \kerning1\expnd0\expndtw0 Part 5\
\pard\pardeftab720\sl280\partightenfactor0

\f10\fs24 \cf6 \cb1 \expnd0\expndtw0\kerning0
\
Destructuring target from event handler in form fields\
\pard\pardeftab720\sl280\partightenfactor0

\f1\b0 \cf6 onChange=\{(\{ target \}) => setPassword(target.value)\}\
\
\pard\pardeftab720\sl280\partightenfactor0

\f10\b \cf6 Setting/getting a token etc from local storage
\f3\b0 \
In our example, this is user object sent back from backend with username, name, and token\
Set
\f1 \
\pard\pardeftab720\sl360\partightenfactor0

\f3 \cf4 \cb5 window\cf6 .\cf4 localStorage\cf6 .\cf11 setItem\cf6 (\cf7 "loggedInUser"\cf6 , \cf4 JSON\cf6 .\cf11 stringify\cf6 (\cf10 user\cf6 ));
\f1 \cb1 \
\pard\pardeftab720\sl280\partightenfactor0

\f3 \cf6 Get\
\pard\pardeftab720\sl360\partightenfactor0
\cf9 \cb5 const\cf6  \cf10 savedUser\cf6  = \cf4 JSON\cf6 .\cf11 parse\cf6 (\cf4 window\cf6 .\cf4 localStorage\cf6 .\cf11 getItem\cf6 (\cf7 "loggedInUser"\cf6 ));\cb1 \
\pard\pardeftab720\sl280\partightenfactor0
\cf6 A common pattern is then setting state to savedUser || null
\f1 \
\
\pard\pardeftab720\sl280\partightenfactor0

\f10\b \cf6 Saving and using token in services\
\pard\pardeftab720\sl280\partightenfactor0

\f3\b0 \cf6 as a global variable inside ex. noteService
\f10\b \
\pard\pardeftab720\sl360\partightenfactor0

\f3\b0 \cf9 \cb5 let\cf6  \cf4 token\cf6  = \cf9 null\cf6 \cb1 \
\cf9 \cb5 const\cf6  \cf11 setToken\cf6  = \cf4 newToken\cf6  \cf9 =>\cf6  \{  \
	\cf4 token\cf6  = \cf7 `bearer \cf9 $\{\cf4 newToken\cf9 \}\cf7 `\
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \}\cb1 \
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf6 \
\pard\pardeftab720\sl280\partightenfactor0

\f3 \cf6 a function that needs token. Now post has URL, new object, and authorization with the token
\f1 \
\pard\pardeftab720\sl360\partightenfactor0

\f3 \cf9 \cb5 const\cf6  \cf11 create\cf6  = \cf9 async\cf6  \cf4 newObject\cf6  \cf9 =>\cf6  \{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5   \cf9 const\cf6  \cf10 config\cf6  = \{ \cf4 headers:\cf6  \{ \cf4 Authorization:\cf6  \cf4 token\cf6  \},  \}\cb1 \
\cb5   \cf9 const\cf6  \cf10 response\cf6  = \cf13 await\cf6  \cf4 axios\cf6 .\cf11 post\cf6 (\cf4 baseUrl\cf6 , \cf4 newObject\cf6 , \cf10 config\cf6 )  \
  \cf4 return\cf6  \cf10 response\cf6 .\cf4 data\cf6 \cb1 \
\cb5 \}\
\
setToken is called from app when loaded to check for user from localStorage, and upon successful login (inside login handler). Local storage also called inside login handler to save\
\cb1 \
\pard\pardeftab720\sl280\partightenfactor0

\f10\b \cf6 A component that wraps its children (props.children)
\f3\b0 \
Use props.children in the render method and your component can contain other components\
<Ocean name=\'93Pacific\'94>\
<Fish />\
</Ocean>\

\f10\b \
Accessing a child component variable from parent 
\f3\b0 \
Without pulling it further up? Can do with useRef, See https://fullstackopen.com/en/part5/props_children_and_proptypes#references-to-components-with-ref\
\

\f10\b Testing React apps (\'93unit tests\'94)\
\pard\pardeftab720\sl280\partightenfactor0

\f1\b0 \cf3 npm install --save-dev @testing-library/react @testing-library/jest-dom\
\
\pard\pardeftab720\sl360\partightenfactor0

\f3 \cf6 simple example. 
\f4 The render method we used renders the components in a format that is suitable for tests without rendering them to the DOM.\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f7\i \cf6 render
\f4\i0  returns an object that has several {\field{\*\fldinst{HYPERLINK "https://testing-library.com/docs/react-testing-library/api#render-result"}}{\fldrslt \cf21 \ul \ulc21 properties}}. One of the properties is called 
\f7\i container
\f4\i0 , and it contains all of the HTML rendered by the component.
\f3 \
\pard\pardeftab720\sl360\partightenfactor0
\cf13 \cb5 import\cf6  \cf4 React\cf6  \cf13 from\cf6  \cf7 'react'\cf6 \cb1 \
\cf13 \cb5 import\cf6  \cf7 '@testing-library/jest-dom/extend-expect'\cf6 \cb1 \
\cf13 \cb5 import\cf6  \{ \cf4 render\cf6  \} \cf13 from\cf6  \cf7 '@testing-library/react'\cf6 \cb1 \
\cf13 \cb5 import\cf6  \cf4 Note\cf6  \cf13 from\cf6  \cf7 './Note'\cf6 \cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf11 \cb5 test\cf6 (\cf7 'renders content'\cf6 , () \cf9 =>\cf6  \{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5   \cf9 const\cf6  \cf10 note\cf6  = \{\cb1 \
\cb5     \cf4 content:\cf6  \cf7 'Component testing is done with react-testing-library'\cf6 ,\cb1 \
\cb5     \cf4 important:\cf6  \cf9 true\cf6 \cb1 \
\cb5   \}\cb1 \
\
\cb5   \cf9 const\cf6  \cf10 component\cf6  = \cf11 render\cf6 (\cb1 \
\cb5     \cf22 <\cf18 Note\cf6  \cf23 note\cf6 =\cf9 \{\cf10 note\cf9 \}\cf6  \cf22 />\cf6 \cb1 \
\cb5   )\cb1 \
\
\cb5   \cf11 expect\cf6 (\cf10 component\cf6 .\cf4 container\cf6 ).\cf11 toHaveTextContent\cf6 (\cb1 \
\cb5     \cf7 'Component testing is done with react-testing-library'\cf6 \cb1 \
\cb5   )\cb1 \
\cb5 \})\cb1 \
\
npm test will start the tests, which will then hang there, watching, until you make a change.\
Tests get stored in the same folder as component because that\'92s how it\'92s configured by default, but might consider changing that because I kind of hate it.\
\
Firing events and mock functions\
\pard\pardeftab720\sl360\partightenfactor0
\cf13 \cb5 import\cf6  \{ \cf4 render\cf6 , \cf4 fireEvent\cf6  \} \cf13 from\cf6  \cf7 '@testing-library/react'\cf6 \cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf17 \cb5 // ...\cf6 \cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf11 \cb5 test\cf6 (\cf7 'clicking the button calls event handler once'\cf6 , () \cf9 =>\cf6  \{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5   \cf9 const\cf6  \cf10 note\cf6  = \{\cb1 \
\cb5     \cf4 content:\cf6  \cf7 'Component testing is done with react-testing-library'\cf6 ,\cb1 \
\cb5     \cf4 important:\cf6  \cf9 true\cf6 \cb1 \
\cb5   \}\cb1 \
\
\cb5   \cf9 const\cf6  \cf10 mockHandler\cf6  = \cf4 jest\cf6 .\cf11 fn\cf6 ()\cb1 \
\
\cb5   \cf9 const\cf6  \cf10 component\cf6  = \cf11 render\cf6 (\cb1 \
\cb5     \cf22 <\cf18 Note\cf6  \cf23 note\cf6 =\cf9 \{\cf10 note\cf9 \}\cf6  \cf23 toggleImportance\cf6 =\cf9 \{\cf10 mockHandler\cf9 \}\cf6  \cf22 />\cf6 \cb1 \
\cb5   )\cb1 \
\
\cb5   \cf9 const\cf6  \cf10 button\cf6  = \cf10 component\cf6 .\cf11 getByText\cf6 (\cf7 'make not important'\cf6 )\cb1 \
\cb5   \cf10 fireEvent\cf6 .\cf11 click\cf6 (\cf10 button\cf6 )\cb1 \
\
\cb5   \cf11 expect\cf6 (\cf10 mockHandler\cf6 .\cf4 mock\cf6 .\cf4 calls\cf6 ).\cf11 toHaveLength\cf6 (\cf8 1\cf6 )\cb1 \
\cb5 \})\cb1 \
\
Finding elements based on text (getByText) is the most foolproof way. You can also add class names or ids to make it easier to grab things, or use querySelector to get a type of element .querySelector(\'93form\'94)\
\
Check your test coverage with \
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3 CI=true npm test -- --coverage\
\pard\pardeftab720\sl360\partightenfactor0

\f3 \cf6 \
\pard\pardeftab720\sl280\partightenfactor0

\f10\b \cf6 End to end testing\
\pard\pardeftab720\sl280\partightenfactor0

\f3\b0 \cf6 Cypress!\
in frontend:\
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3 npm install --save-dev cypress\
\pard\pardeftab720\sl280\partightenfactor0

\f3 \cf6 new script:\
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3 "cypress:open": "cypress open"\
\
\pard\pardeftab720\sl280\partightenfactor0

\f3 \cf6 new script in backend\
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3 "start:test": "NODE_ENV=test node index.js"\
\
\pard\pardeftab720\sl280\partightenfactor0

\f3 \cf6 start up both (remember backend in test mode, so npm run start:test) and cypress will make some folders 
\f1 \cf3 \
\

\f3 \cf6 Delete the tests in integration/examples and add your own tests name.spec.js\
\
simple example\
\pard\pardeftab720\sl360\partightenfactor0
\cf11 \cb5 describe\cf6 (\cf7 'Note app'\cf6 , \cf9 function\cf6 () \{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5   \cf11 beforeEach\cf6 (\cf9 function\cf6 () \{    \cf4 cy\cf6 .\cf11 visit\cf6 (\cf7 'http://localhost:3000'\cf6 )  \})\
\cb1 \
\cb5   \cf11 it\cf6 (\cf7 'front page can be opened'\cf6 , \cf9 function\cf6 () \{\cb1 \
\cb5     \cf4 cy\cf6 .\cf11 contains\cf6 (\cf7 'Notes'\cf6 )\cb1 \
\cb5     \cf4 cy\cf6 .\cf11 contains\cf6 (\cf7 'Note app, Department of Computer Science, University of Helsinki 2021'\cf6 )\cb1 \
\cb5   \})\cb1 \
\
\cb5   \cf11 it\cf6 (\cf7 'login form can be opened'\cf6 , \cf9 function\cf6 () \{\cb1 \
\cb5     \cf4 cy\cf6 .\cf11 contains\cf6 (\cf7 'log in'\cf6 ).\cf11 click\cf6 ()\cb1 \
\cb5   \})\
\cb1 \
\cb5 \})\cb1 \
\
\pard\pardeftab720\sl280\partightenfactor0
\cf6 Note you use .contains to check if it\'92s there, and also click it or whatever. Can also .get by id.\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb5 cy\cf6 .\cf11 contains\cf6 (\cf7 'log in'\cf6 ).\cf11 click\cf6 ()\cb1 \
\cf4 \cb5 cy\cf6 .\cf11 get\cf6 (\cf7 '#username'\cf6 ).\cf11 type\cf6 (\cf7 'mluukkai'\cf6 )\cb1 \
\pard\pardeftab720\sl280\partightenfactor0
\cf6 \
\pard\pardeftab720\sl280\partightenfactor0

\f10\b \cf6 End to end testing and the database\
\pard\pardeftab720\sl280\partightenfactor0

\f3\b0 \cf6 E2E tests don\'92t have access to database so you need to add a new router for the tests that is in the backend for test mode only.\
Look here\
https://fullstackopen.com/en/part5/end_to_end_testing#controlling-the-state-of-the-database\
\
\pard\pardeftab720\sl280\partightenfactor0

\f10\b \cf6 Cypress is too slow
\f3\b0 \
Use .only to run one test at a time\
\

\f10\b Bypass the UI 
\f3\b0  \
Only login through the UI once and then use cypress to directly post to login or whatever\
\

\f10\b Custom commands 
\f3\b0 \
Separate out commonly used actions into 
\f9\i cypress/support/commands.js
\f1\i0 .\
\
\pard\pardeftab720\sl280\partightenfactor0

\f0\b\fs36 \cf6 \cb24 \kerning1\expnd0\expndtw0 Part 6\
\pard\pardeftab720\sl280\partightenfactor0

\f3\b0\fs24 \cf6 \cb1 \expnd0\expndtw0\kerning0
Redux, which we\'92ve done a lot lately, so very briefly:\
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3 npm install redux\
npm install react-redux\
npm install redux-thunk\
npm install --save-dev redux-devtools-extension
\f3 \cf6 \
\
\pard\pardeftab720\sl280\partightenfactor0

\f10\b \cf6 store.js
\f3\b0 \
\pard\pardeftab720\sl360\partightenfactor0
\cf13 \cb5 import\cf6  \{ \cf4 createStore\cf6 , \cf4 combineReducers\cf6 , \cf4 applyMiddleware\cf6  \} \cf13 from\cf6  \cf7 "redux"\cf6 ;\cb1 \
\cf13 \cb5 import\cf6  \cf4 thunk\cf6  \cf13 from\cf6  \cf7 "redux-thunk"\cf6 ;\cb1 \
\cf13 \cb5 import\cf6  \{ \cf4 composeWithDevTools\cf6  \} \cf13 from\cf6  \cf7 "redux-devtools-extension"\cf6 ;\cb1 \
\
\cf13 \cb5 import\cf6  \cf4 messageReducer\cf6  \cf13 from\cf6  \cf7 "./reducers/messageReducer"\cf6 ;\cb1 \
\cf13 \cb5 import\cf6  \cf4 blogReducer\cf6  \cf13 from\cf6  \cf7 "./reducers/blogReducer"\cf6 ;\cb1 \
\cf13 \cb5 import\cf6  \cf4 userReducer\cf6  \cf13 from\cf6  \cf7 "./reducers/userReducer"\cf6 ;\cb1 \
\cf13 \cb5 import\cf6  \cf4 usersReducer\cf6  \cf13 from\cf6  \cf7 "./reducers/usersReducer"\cf6 ;\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf9 \cb5 const\cf6  \cf11 reducer\cf6  = \cf11 combineReducers\cf6 (\{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5   \cf11 message\cf4 :\cf6  \cf11 messageReducer\cf6 ,\cb1 \
\cb5   \cf11 blogs\cf4 :\cf6  \cf11 blogReducer\cf6 ,\cb1 \
\cb5   \cf11 user\cf4 :\cf6  \cf11 userReducer\cf6 ,\cb1 \
\cb5   \cf11 users\cf4 :\cf6  \cf11 usersReducer\cf6 ,\cb1 \
\cb5 \});\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf9 \cb5 const\cf6  \cf10 store\cf6  = \cf11 createStore\cf6 (\cf11 reducer\cf6 , \cf11 composeWithDevTools\cf6 (\cf11 applyMiddleware\cf6 (\cf10 thunk\cf6 )));\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf13 \cb5 export\cf6  \cf13 default\cf6  \cf10 store\cf6 ;\
\
\pard\pardeftab720\sl280\partightenfactor0

\f10\b \cf6 \cb1 index.js
\f3\b0 \
\pard\pardeftab720\sl360\partightenfactor0
\cf13 \cb5 import\cf6  \cf4 React\cf6  \cf13 from\cf6  \cf7 "react"\cf6 ;\cb1 \
\cf13 \cb5 import\cf6  \cf4 ReactDOM\cf6  \cf13 from\cf6  \cf7 "react-dom"\cf6 ;\cb1 \
\cf13 \cb5 import\cf6  \{ \cf4 Provider\cf6  \} \cf13 from\cf6  \cf7 "react-redux"\cf6 ;\cb1 \
\cf13 \cb5 import\cf6  \cf4 store\cf6  \cf13 from\cf6  \cf7 "./store"\cf6 ;\cb1 \
\cf13 \cb5 import\cf6  \cf4 App\cf6  \cf13 from\cf6  \cf7 "./App"\cf6 ;\cb1 \
\cf13 \cb5 import\cf6  \cf7 "./index.css"\cf6 ;\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb5 ReactDOM\cf6 .\cf11 render\cf6 (\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5   \cf22 <\cf18 Provider\cf6  \cf23 store\cf6 =\cf9 \{\cf10 store\cf9 \}\cf22 >\cf6 \cb1 \
\cb5         \cf22 <\cf18 App\cf6  \cf22 />\cf6 \cb1 \
\cb5   \cf22 </\cf18 Provider\cf22 >\cf6 ,\cb1 \
\cb5   \cf4 document\cf6 .\cf11 getElementById\cf6 (\cf7 "root"\cf6 )\cb1 \
\cb5 );
\f10\b \
\
Sample async action creator with thunk\
\pard\pardeftab720\sl360\partightenfactor0

\f3\b0 \cf13 export\cf6  \cf9 const\cf6  \cf11 setAllBlogs\cf6  = () \cf9 =>\cf6  \{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5   \cf13 return\cf6  \cf9 async\cf6  (\cf4 dispatch\cf6 ) \cf9 =>\cf6  \{\cb1 \
\cb5     \cf9 const\cf6  \cf10 blogs\cf6  = \cf13 await\cf6  \cf4 blogService\cf6 .\cf11 getAll\cf6 ();\cb1 \
\cb5     \cf11 dispatch\cf6 (\{\cb1 \
\cb5       \cf4 type:\cf6  \cf7 "SET_ALL_BLOGS"\cf6 ,\cb1 \
\cb5       \cf4 data:\cf6  \{ \cf4 blogs\cf6  \},\cb1 \
\cb5     \});\cb1 \
\cb5   \};\cb1 \
\cb5 \};\
\
\pard\pardeftab720\sl360\partightenfactor0

\f10\b \cf6 Sample reducer\
\pard\pardeftab720\sl360\partightenfactor0

\f3\b0 \cf9 const\cf6  \cf11 blogReducer\cf6  = (\cf4 state\cf6  = [], \cf4 action\cf6 ) \cf9 =>\cf6  \{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5   \cf13 switch\cf6  (\cf4 action\cf6 .\cf4 type\cf6 ) \{\cb1 \
\cb5     \cf13 case\cf6  \cf7 "SET_ALL_BLOGS"\cf6 :\cb1 \
\cb5       \cf13 return\cf6  \cf4 action\cf6 .\cf4 data\cf6 .\cf4 blogs\cf6 ;\cb1 \
\cb5     \cf13 case\cf6  \cf7 "ADD_BLOG"\cf6 :\cb1 \
\cb5       \cf13 return\cf6  \cf4 state\cf6 .\cf11 concat\cf6 (\cf4 action\cf6 .\cf4 data\cf6 .\cf4 addedBlog\cf6 );\cb1 \
\cb5     \cf13 case\cf6  \cf7 "UPDATE_BLOG"\cf6 :\cb1 \
\cb5       \cf13 return\cf6  \cf4 state\cf6 .\cf11 map\cf6 ((\cf4 item\cf6 ) \cf9 =>\cf6 \cb1 \
\cb5         \cf4 item\cf6 .\cf4 id\cf6  === \cf4 action\cf6 .\cf4 data\cf6 .\cf4 updatedBlog\cf6 .\cf4 id\cf6  ? \cf4 action\cf6 .\cf4 data\cf6 .\cf4 updatedBlog\cf6  : \cf4 item\cf6 \cb1 \
\cb5       );\cb1 \
\cb5     \cf13 default\cf6 :\cb1 \
\cb5       \cf13 return\cf6  \cf4 state\cf6 ;\cb1 \
\cb5   \}\cb1 \
\cb5 \};\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf13 \cb5 export\cf6  \cf13 default\cf6  \cf11 blogReducer\cf6 ;\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0

\f10\b \cf6 Use action creator inside component \
\pard\pardeftab720\sl360\partightenfactor0

\f3\b0 \cf6 \cb5   \cf9 const\cf6  \cf11 dispatch\cf6  = \cf11 useDispatch\cf6 ();\cb1 \
\pard\pardeftab720\sl360\partightenfactor0

\f10\b \cf6 \
\pard\pardeftab720\sl360\partightenfactor0

\f3\b0 \cf11 \cb5 dispatch\cf6 (\cf11 setAllBlogs\cf6 (\cf10 updatedBlogs\cf6 ));\
\
\pard\pardeftab720\sl360\partightenfactor0

\f10\b \cf6 \cb1 Getting store inside component\
\pard\pardeftab720\sl360\partightenfactor0

\f3\b0 \cf6 \cb5   \cf9 const\cf6  \cf10 blogs\cf6  = \cf11 useSelector\cf6 ((\cf4 state\cf6 ) \cf9 =>\cf6  \cf4 state\cf6 .\cf4 blogs\cf6 );\cb1 \
\
(skip connect, older version of useDispatch, useSelector)\
\
\pard\pardeftab720\sl280\partightenfactor0

\f0\b\fs36 \cf6 \cb25 \kerning1\expnd0\expndtw0 Part 7\
\pard\pardeftab720\sl280\partightenfactor0

\f10\fs24 \cf6 \cb1 \expnd0\expndtw0\kerning0
React-router\
\pard\pardeftab720\sl280\partightenfactor0

\f1\b0 \cf3 npm install react-router-dom\
\
\pard\pardeftab720\sl280\partightenfactor0

\f3 \cf6 inside index.js
\f1 \
\pard\pardeftab720\sl360\partightenfactor0

\f3 \cf13 \cb5 import\cf6  \{ \cf4 BrowserRouter\cf6  \cf13 as\cf6  \cf4 Router\cf6  \} \cf13 from\cf6  \cf7 "react-router-dom"\cf6 ;\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb5 ReactDOM\cf6 .\cf11 render\cf6 (\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5     \cf22 <\cf18 Router\cf22 >\cf6 \cb1 \
\cb5         \cf22 <\cf18 App\cf6  \cf22 />\cf6 \cb1 \
\cb5     \cf22 </\cf18 Router\cf22 >\cf6 \cb1 \
\cb5   \cf4 document\cf6 .\cf11 getElementById\cf6 (\cf7 "root"\cf6 )\cb1 \
\cb5 );\cb1 \
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf3 \
\
\pard\pardeftab720\sl280\partightenfactor0

\f3 \cf6 inside app (including routeMatch)
\f1 \
\pard\pardeftab720\sl360\partightenfactor0

\f3 \cf13 \cb5 import\cf6  \{ \cf4 Switch\cf6 , \cf4 Route\cf6 , \cf4 useRouteMatch\cf6 , \cf4 Redirect\cf6  \} \cf13 from\cf6  \cf7 "react-router-dom"\cf6 ;\
\
 \cf9 const\cf6  \cf10 match\cf6  = \cf11 useRouteMatch\cf6 (\cf7 "/users/:id"\cf6 );\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5   \cf9 const\cf6  \cf10 matchUser\cf6  = \cf10 match\cf6 \cb1 \
\cb5     ? \cf10 users\cf6 .\cf11 find\cf6 ((\cf4 user\cf6 ) \cf9 =>\cf6  \cf4 user\cf6 .\cf4 id\cf6  === \cf10 match\cf6 .\cf4 params\cf6 .\cf4 id\cf6 )\cb1 \
\cb5     : \cf9 null\cf6 ;\cb1 \
\
\cb5     \cf22 <\cf18 Switch\cf22 >\cf6 \cb1 \
\cb5         \cf22 <\cf18 Route\cf6  \cf23 path\cf6 =\cf7 "/users/:id"\cf22 >\cf6 \cb1 \
\cb5           \cf9 \{\cf10 matchUser\cf6  ? \cf22 <\cf18 User\cf6  \cf23 user\cf6 =\cf9 \{\cf10 matchUser\cf9 \}\cf6  \cf22 />\cf6  : \cf22 <\cf18 Redirect\cf6  \cf23 to\cf6 =\cf7 "/users"\cf6  \cf22 />\cf9 \}\cf6 \cb1 \
\cb5         \cf22 </\cf18 Route\cf22 >\cf6 \
        \cf22 <\cf18 Route\cf6  \cf23 path\cf6 =\cf7 "/blogs"\cf22 >\cf6 \cb1 \
\cb5           \cf22 <\cf18 Blogs\cf6  \cf23 showMessage\cf6 =\cf9 \{\cf11 showMessage\cf9 \}\cf6  \cf22 />\cf6 \cb1 \
\cb5         \cf22 </\cf18 Route\cf22 >\cf6 \cb1 \
\cb5     \cf22 </\cf18 Switch\cf22 >\cf6 \cb1 \
 \
\pard\pardeftab720\sl280\partightenfactor0
\cf6 inside wherever your menu is
\f2 \
\pard\pardeftab720\sl280\partightenfactor0

\f3 \cf13 \cb5 import\cf6  \{ \cf4 Link\cf6  \} \cf13 from\cf6  \cf7 "react-router-dom"\cf6 ;\cb1 \
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf6 \
\pard\pardeftab720\sl360\partightenfactor0

\f3 \cf22 \cb5 <\cf18 Link\cf6  \cf23 to\cf6 =\cf7 "/"\cf22 >\cf6 home\cf22 </\cf18 Link\cf22 >\cf6 \cb1 \
\cf22 \cb5 <\cf18 Link\cf6  \cf23 to\cf6 =\cf7 "/notes"\cf22 >\cf6 notes\cf22 </\cf18 Link\cf22 >\cf6 \cb1 \
\cf22 \cb5 <\cf18 Link\cf6  \cf23 to\cf6 =\cf7 "/users"\cf22 >\cf6 users\cf22 </\cf18 Link\cf22 >\cf6 \cb1 \
\pard\pardeftab720\sl280\partightenfactor0

\f1 \cf6 \
\pard\pardeftab720\sl280\partightenfactor0

\f3 \cf6 \
\pard\pardeftab720\sl280\partightenfactor0

\f10\b \cf6 Custom hooks \
\pard\pardeftab720\sl280\partightenfactor0

\f3\b0 \cf6 example: useField for form fields\
\pard\pardeftab720\sl360\partightenfactor0
\cf9 \cb5 const\cf6  \cf11 useField\cf6  = (\cf4 type\cf6 ) \cf9 =>\cf6  \{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb5   \cf9 const\cf6  [\cf10 value\cf6 , \cf10 setValue\cf6 ] = \cf11 useState\cf6 (\cf7 ''\cf6 )\cb1 \
\
\cb5   \cf9 const\cf6  \cf11 onChange\cf6  = (\cf4 event\cf6 ) \cf9 =>\cf6  \{\cb1 \
\cb5     \cf11 setValue\cf6 (\cf4 event\cf6 .\cf4 target\cf6 .\cf4 value\cf6 )\cb1 \
\cb5   \}\cb1 \
\
\cb5   \cf13 return\cf6  \{ \cf4 type\cf6 , \cf4 value\cf6 , \cf11 onChange\cf6  \}\cb1 \
\cb5 \}\
\
use elsewhere like regular hook \cb1 \
\pard\pardeftab720\sl280\partightenfactor0
\cf6 \
\pard\pardeftab720\sl360\partightenfactor0
\cf9 \cb5 const\cf6  \cf10 name\cf6  = \cf11 useField\cf6 (\cf7 'text'\cf6 )\cb1 \
\
can use spread attributes to plug everything into input\
\pard\pardeftab720\sl360\partightenfactor0
\cf22 \cb5 <input\cf6  \cf23 type\cf6 =\cf9 \{\cf4 name\cf6 .\cf4 type\cf9 \}\cf6  \cf23 value\cf6 =\cf9 \{\cf4 name\cf6 .\cf4 value\cf9 \}\cf6  \cf23 onChange\cf6 =\cf9 \{\cf4 name\cf6 .\cf4 onChange\cf9 \}\cf6  \cf22 />\cf6 ;\cb1 \
becomes\
\cf22 \cb5 <input\cf6  \cf9 \{\cf6 ...\cf4 name\cf9 \}\cf6  \cf22 />\cf6  \cb1 \
\
\pard\pardeftab720\sl280\partightenfactor0

\f10\b \cf6 Styles\
\pard\pardeftab720\sl280\partightenfactor0

\f3\b0 \cf6 Overview of React Bootstrap, Material UI, and styled components. I preferred Material UI with custom color scheme (see part 7 extended-bloglist)\
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \
\pard\pardeftab720\sl280\partightenfactor0

\f10\b \cf6 Webpack\
\pard\pardeftab720\sl280\partightenfactor0

\f3\b0 \cf6 See webpack-practice example for react, odin project notes for \'93vanilla\'94 Javascript. \
\
\pard\pardeftab720\sl280\partightenfactor0

\f10\b \cf6 Miscellaneous grab bag\
\pard\pardeftab720\sl280\partightenfactor0

\f3\b0 \cf6 Class components, organization of code, where to put front end vs back end, polling and websockets, security, future trends, library and link round-up. }